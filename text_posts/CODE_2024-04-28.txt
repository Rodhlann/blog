[Sun Apr 28 2024]

Using my Rust A* Search Algorithm implementation as reference
I was able to significantly improve search times 
in my JavaScript implementation!! 

I ended up refactoring how collisions were recorded and 
detected, and reduced the amount of nesting in my Node objects,
which massively improved performance. I am no longer seeing
issues with browser tabs hanging, and I've resolved the critical 
bug where creating a scenario where the start and end points
can't connect it would loop infinitely. 

It's pretty cool to be able to take the improvements I made
in Rust and get to see the benefits of that after just
a single refactor session!! Though I admit it would have been 
significantly faster if I had committed to setting my development
environment up in TypeScript! Got hung up several times on 
careless typing issues throughout my refactor, and I also don't 
have a test suite built for this project. Really doing it
on hard mode...

Unfortunately, the search is so fast now I don't know if there's
a good way for me to directly compare the Rust implementation compiled to
WASM against my JS implementation! As far as I understand
JS performance timers are only MS accuracy, and it's almost
always 0ms runtime now. A good problem to have!

Perhaps I can make a much larger grid instead. I do 
still really want to figure out that WASM test case... 

Now that I have the search algorithm working well I think
it's <i>finally</i> time for me to start looking back
at my TIC-80 project too! How exciting!

I am so glad I was patient with myself and was able
to iterate on this project. Can't wait to see what 
I can accomplish with this new search knowledge!! 